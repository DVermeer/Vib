'use strict';

var defaultFetchOptions = {
    credentials: 'same-origin',
    headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
    }
};

var defaultPostOptions = Object.assign({}, defaultFetchOptions, { method: 'post' });
var defaultGetOptions = Object.assign({}, defaultFetchOptions, { method: 'get' });

var post = function post(url, options) {
    return fetch(url, Object.assign({}, defaultPostOptions, options));
};
var get = function get(url, options) {
    return fetch(url, Object.assign({}, defaultGetOptions, options));
};

var postJson = function postJson(url, data, options) {
    return post(url, Object.assign({ body: JSON.stringify(data) }, options)).then(function (response) {
        return response.json();
    });
};
var getJson = function getJson(url, data, options) {
    return get(url, Object.assign({ body: JSON.stringify(data) }, options)).then(function (response) {
        return response.json();
    });
};

var getMySessions = function getMySessions() {
    return getJson('/api/sessions/subscribed');
};
var getFullSessions = function getFullSessions() {
    return getJson('/api/sessions/full');
};

var subcribe = function subcribe(sessionId) {
    return postJson('/api/sessions/subscribe', { 'Id': sessionId });
};
var unsubcribe = function unsubcribe(sessionId) {
    return postJson('/api/sessions/unsubscribe', { 'Id': sessionId });
};

var subscribeToSession = function subscribeToSession(id) {
    return subcribe(id).then(markSessionsAsSubscribed).then(getFullSessions).then(markSessionsAsFull).then(markSlots);
};

var unsubscribeToSession = function unsubscribeToSession(id) {
    return unsubcribe(id).then(markSessionsAsSubscribed).then(getFullSessions).then(markSessionsAsFull).then(markSlots);
};

var markSlotAsSubscribed = function markSlotAsSubscribed(slot) {
    return slot.classList.add('slot__subscribed-session');
};
var markSlotAsUnsubscribed = function markSlotAsUnsubscribed(slot) {
    return slot.classList.remove('slot__subscribed-session');
};
var hasSubscribedSession = function hasSubscribedSession(slot) {
    return slot.querySelector('.subscribed');
};

var markSlots = function markSlots() {
    var slots = Array.from(document.querySelectorAll('.slot'));

    // remove class form all slots
    slots.forEach(markSlotAsUnsubscribed);

    // add class to slots with subscribed session
    slots.filter(hasSubscribedSession).forEach(markSlotAsSubscribed);
};

var markSessionAs = function markSessionAs(className, sessionId) {
    var session = document.querySelector('.session[data-session-id="' + sessionId + '"]');
    if (session) {
        session.classList.add(className);
    }
};

var markSessionsAs = function markSessionsAs(className, sessionIds) {
    // eerst alles verwijderen
    var sessions = Array.from(document.querySelectorAll('.session'));
    sessions.forEach(function (e) {
        return e.classList.remove(className);
    });

    // markeer de waar id klopt
    sessionIds.forEach(function (sessionId) {
        return markSessionAs(className, sessionId);
    });
};

var markSessionsAsFull = function markSessionsAsFull(sessionIds) {
    return markSessionsAs('full', sessionIds);
};
var markSessionsAsSubscribed = function markSessionsAsSubscribed(sessionIds) {
    return markSessionsAs('subscribed', sessionIds);
};

var showPopupForSession = function showPopupForSession(id) {
    showPopupElement(id);
    document.body.style.overflow = 'hidden';
    // Deze regel voorkomt overscroll op iPhone, als je op dezelfde positie wilt blijven
    // zorg voor offsetTop na het sluiten van de popup
    // document.body.style.position = 'fixed';
};

var closePopupForSession = function closePopupForSession(id) {
    hidePopupElement(id);
    document.body.style.overflow = '';
    // Deze regel voorkomt overscroll op iPhone
    // document.body.style.position = '';
};

var hideElement = function hideElement(element) {
    return element.classList.remove('show');
};
var showElement = function showElement(element) {
    return element.classList.add('show');
};

var getPopupElement = function getPopupElement(sessionId) {
    return document.querySelector('.session[data-session-id="' + sessionId + '"] .js-modal-content');
};

var hidePopupElement = function hidePopupElement(sessionId) {
    return hideElement(getPopupElement(sessionId));
};
var showPopupElement = function showPopupElement(sessionId) {
    return showElement(getPopupElement(sessionId));
};

var closeButtons = Array.from(document.querySelectorAll('.js-modal-close'));
closeButtons.forEach(function (button) {
    return button.addEventListener('click', function (event) {
        event.stopPropagation();
        closePopupForSession(button.dataset.sessionId);
    });
});

var subscribeButtons = Array.from(document.querySelectorAll('.js-subscribe'));
subscribeButtons.forEach(function (button) {
    return button.addEventListener('click', function (event) {
        event.stopPropagation();
        subscribeToSession(button.dataset.sessionId);
        closePopupForSession(button.dataset.sessionId);
    });
});

var unsubscribeButtons = Array.from(document.querySelectorAll('.js-unsubscribe'));
unsubscribeButtons.forEach(function (button) {
    return button.addEventListener('click', function (event) {
        event.stopPropagation();
        unsubscribeToSession(button.dataset.sessionId);
        closePopupForSession(button.dataset.sessionId);
    });
});

document.addEventListener('DOMContentLoaded', function () {
    var sessions = Array.from(document.querySelectorAll('.session'));
    sessions.forEach(function (session) {
        return session.addEventListener('click', showPopupForSession.bind(null, session.dataset.sessionId));
    });

    getMySessions().then(markSessionsAsSubscribed).then(markSlots);
});
//# sourceMappingURL=site.es5.min.js.map
